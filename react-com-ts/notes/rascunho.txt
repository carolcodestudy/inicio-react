Arquivos

App.tsx - /primiero/src/components
Fala sobre os props opicionais

import { Header } from './components/header'
import { Student } from './components/student'
import { Footer } from './components/footer'

//Componente principal
const App = ()=>{
  //JSX é o que retornanmos para o HTML
  return(
    <div>
      <Header title='Texto não padronizado escrito em App.tsx'/>

      <Student name = "Ana Carolina" age={24}/>

      <Student name = "Josemar" age={43}/>

      <Footer/>
    </div>
  )
}

export default App

/components
header.tsx

import './header.css'

interface TitleProps{
    title ?: string
}

export function Header ( {title = "Titulo pradonizado no componente"} : TitleProps ){
    return(
        <header className="header">
            <h1 className="title">{title}</h1>
            <hr/>
        </header>
        
    )
}

header.css

@charset "UTF -08";

.header{
    width: 100%; background-color: brown; 
}

.title{
    color: whitesmoke; text-align: center; padding-top: 14px;
}

student.tsx

//Criar interface para por um valor nas propriedades isso é necessário para que o ts entenda o que quero
interface MyName{
    name : string
    age : number
  }
  
export function Student({ name, age } : MyName){
    return(
      <h2>Nome: {name} <br/> Idade: {age}</h2>
    )
  }

footer.tsx

export function Footer(){
    return(
        <footer>
            <p>Todos os direitos reservados- @cursos</p>
        </footer>
    )
}

Arquivo App.tsx antes de por lista:

import { useState } from 'react'

//Componente principal
const App = ()=>{

  //Estado das variáveis. input = armazena | setInput = faz a ação
  const [input, setInput] = useState("")
  const [student, setStudent] = useState("Aluno(a)")
  const [age, setAge] = useState<string | number>("")
  const [studentAge, setStudentAge] = useState<string | number>()

  const saveName = () =>{
    setStudent(input)
    setStudentAge(age)
  }

  //JSX é o que retornanmos para o HTML
  return(
    <div>
        <h1>Salvar o nome</h1>
        <input type="text" placeholder="Nome" value={input} onChange={(e) => setInput(e.target.value)} />
        <br /><br />
        <input type="text" placeholder='Idade' value={age} onChange={(e)=> setAge(e.target.value)}/>
        <button onClick={saveName}>Salvar</button>
        
        <br /><br />
        <h2>Nome: {student} <br /> {studentAge} anos</h2>
    </div>
  )
}

export default App

//Precisa colocar o input e o setInput, pois nada adiantará. O valor ficará vazio

App.tsx com o inicio dos estudos de userState 

import { useState } from 'react'

//Componente principal
const App = ()=>{

  //Estado das variáveis. input = armazena | setInput = faz a ação
  const [input, setInput] = useState("")
  const [age, setAge] = useState("")

  //Tipagem
  interface DateStudent{
    student : string,
    age :string
  }

  const [datesStudent, setDatesStudent] = useState<DateStudent>()

  const saveName = () =>{
    setDatesStudent({
      student : input,
      age : age
    })
  }

  //Criar contador
  const [counter , setCounter] = useState<number>(0)

  //Função para soma do contador
  const Add = () =>{
    setCounter(counter + 1)
  }

    //Função para subtrair do contador
    const Sub = () =>{
      //Não deixa chegar a -1
      if(counter === 0){
        return
      }
      setCounter(counter - 1)
    }

  //JSX é o que retornanmos para o HTML
  return(
    <div>
        <h1>Salvar o nome</h1>
        <input type="text" placeholder="Nome" value={input} onChange={(e) => setInput(e.target.value)} />
        <br /><br />
        <input type="text" placeholder='Idade' value={age} onChange={(e)=> setAge(e.target.value)}/>
        <button onClick={saveName}>Salvar</button>
        
        <br /><br />

        <h2>Nome:  { datesStudent?.student } <br /> { datesStudent?.age } anos</h2>

        <hr />
        <h3>Contador:</h3>
        <button onClick={Add}>more</button> {counter} <button onClick={Sub}>less</button>
    </div>
  )
}
export default App
//Precisa colocar o input e o setInput, pois nada adiantará. O valor ficará vazio

App.tsx (para aula 5)


  interface DateUser{
    userName : string,
    userRol : string
  }

  const [user, setUser] = useState<DateUser>({
    userName : "visitante!",
    userRol : ""
  })

  function handleLogin(){
    setUser({
      userName : "Carol",
      userRol : "TI"
    })
  }
  function handleLogout(){
    setUser({
      userName : "visitante!",
      userRol : ""
    })
  }

const App = ()=>{


  //JSX é o que retornanmos para o HTML
  return(
    <div>
              <h1>Olá {user?.userName}</h1>
              <h2>{user?.userRol}</h2>
        <button onClick={handleLogin}>Entrar</button>
        <br /> <br />
        <button onClick={handleLogout}>Sair</button>
    </div>
  )
}
export default App

Lista com useEfect e useRef

import { useState, useEffect, useRef } from 'react'

const App = ()=>{
 
//Lista
const [task, setTask] = useState<string[]>([])

//Nova tarefa
const [ newTask, setNewTask ] = useState("")

//Editar tarefa
const [ editTask, setEditTask] = useState({
  enabled : false,
  text : ''
})

//useEffect
useEffect (()=> {
    //Captura das tarefas com Local storage. Passa a chave
    const tasks_local = localStorage.getItem("key")

    if(tasks_local){
      //Tarefas salvas em string e preciso retorna-las como um array
      setTask(JSON.parse(tasks_local))   
    }
} , [] )

//useRef. Precisa saber a que elemento ele vai prestar a referência
const inputRef = useRef<HTMLInputElement>(null)

const AddTask = () => {
  if(!newTask){
    alert("Nenhuma tarefa adicionada!")
    return
  }
  else{
      if(editTask.enabled){
        //Passa uma função para salvar a tarefa 
        savedEdit()
        return
      }
       //Adicona a tarefa e puxa as tarefas já existentes no useState. Usa o spread operator do JS
       setTask(savedTask => [...savedTask, newTask])
       //Limpa o campo após adicionada a tarefa
       setNewTask("")
      //Uso do Lacal Storage. Passa a chave(que deve ser a mesma para outros localstorage), transforma array em string para ser lido, puxa a lista e a nova tarefa salva
      localStorage.setItem("key" , JSON.stringify([...task, newTask]))
  }
}
//Função que vai verificar o item do botão que cliquei pra ver se é aquele mesmo
const DelTask = (deletedTask : string) =>{
  const list_updated = task.filter( (task) => task !== deletedTask )
  //Remove a tarefa
  setTask(list_updated)
  //Para saber o item deletado
  localStorage.setItem("key", JSON.stringify(list_updated))
}

//Função para editar
const EdiTask = (editedTask : string) =>{
  //Passar a tarefa escolhida para ser editada no input
  setNewTask(editedTask)
  setEditTask({
    enabled : true,
    text : editedTask
  })

    //Captura o cursor e põe dentro do input para editar. Verifica se o seu estado está vazio
    inputRef.current?.focus()
}
function savedEdit(){
  //Encontra o index(índice) da tarefa. Observação: para comparar a terafa correspondente ao index, passei editTask com a popriedade text
  const indexTask = task.findIndex((task) => task === editTask.text)
  const list_updated = [...task]
  //Captura o index da tarefa para saber qual vai ser editada e salvada como uma nova tarefa na lista 
  list_updated[indexTask] = newTask
  setTask(list_updated)

  //Significa que a tarefa já foi editada
  setEditTask({
    enabled : false,
    text : ''
  })

  setNewTask("")
  localStorage.setItem("key", JSON.stringify(list_updated))
  //Para testar no console tem que ir em applications >> Local storage
}

  return(
  <div>
    
      <h1>Lista de tarefas</h1>

      <input type="text" value={newTask} onChange={(e) => setNewTask(e.target.value)} aria-label='Campo para tarefa' placeholder='Tarefa para lista' ref={inputRef} />

      <button onClick={AddTask} title="Botão de adicionar ou atualizar">
      {/*Valor ternário para o valor do botão*/ editTask.enabled ? "Atualizar" : "Adicionar" }</button>
      
      <hr />

      {task.map( (iten) =>(
        <section key={iten}><span>{iten} <button onClick={() => EdiTask(iten)} title='Botão de editar'>Editar</button>  <button onClick={ ()=> DelTask(iten) } title='Botão de deletar'>Excluir</button> </span></section>
      ) )} 

      </div>
  )
}
export default App
